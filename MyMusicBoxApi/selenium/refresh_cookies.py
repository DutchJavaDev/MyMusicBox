import json
import random
import time
import os
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium_stealth import stealth

def human_delay():
    time.sleep(random.uniform(0.5, 2.5))

def json_to_netscape(cookies):
    lines = [
        "# Netscape HTTP Cookie File",
        "# This file was generated by a Python script",
        "# Format: domain\tinclude_subdomains\tpath\tsecure\texpiration\tname\tvalue"
    ]

    for cookie in cookies:
        domain = cookie["domain"]
        include_subdomains = "TRUE" if domain.startswith(".") else "FALSE"
        path = cookie.get("path", "/")
        secure = "TRUE" if cookie.get("secure", False) else "FALSE"
        expiry = cookie.get("expiry", 0)
        name = cookie["name"]
        value = cookie["value"]

        # Ensure proper tab separation
        line = f"{domain}\t{include_subdomains}\t{path}\t{secure}\t{expiry}\t{name}\t{value}"
        lines.append(line)

    return "\n".join(lines)

# Load env files if any
load_dotenv()
# Configure Chrome options for headless mode
options = Options()
#options.binary_location = "/usr/bin/chromium-browser"
#options.add_argument("--headless")  # Run without GUI
options.add_argument("--no-sandbox")  # Required for Linux
options.add_argument("--disable-dev-shm-usage")  # Fixes resource issues
options.add_argument("--disable-gpu")  # Avoids GPU-related crashes
options.add_argument('--disable-blink-features=AutomationControlled')
options.add_argument('--disable-infobars')
options.add_argument('--window-size=1920,1080')
options.add_argument('--start-maximized')
options.add_argument('--no-first-run')
options.add_argument('--no-service-autorun')
options.add_argument('--password-store=basic')
options.add_argument('--disable-extensions')
options.add_argument('--disable-popup-blocking')
options.add_argument('--disable-notifications')
options.add_argument('--lang=en-US')
options.add_argument('--user-agent=Mozilla/5.0 (Linux; Android 10; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.131 Mobile Safari/537.36')

# Initialize undetected-chromedriver (avoids bot detection)
# Connect to Selenium in Docker
driver = webdriver.Remote(
    command_executor='http://localhost:4444/wd/hub',
    options=options,
)

try:
    # Step 1: Navigate to Google login
    print("Navigating to Google login...")
    driver.get("https://accounts.google.com/")
    human_delay()

    #view source of all....
    # with open("email.html", "w") as i:
    #     i.write(driver.page_source)
    account_email = os.getenv("EMAIL")
    # Step 2: Enter email
    email = driver.find_element(By.ID, "identifierId")
    email.send_keys(account_email)  # Replace with your email
    driver.find_element(By.ID, "identifierNext").click()
    print("Email submitted. Waiting for password page...")
    human_delay()

    # with open("password.html", "w") as i:
    #     i.write(driver.page_source)

    # Step 3: Enter password
    account_email_password = os.getenv("EMAIL_PASSWORD")
    password = driver.find_element(By.NAME, "Passwd")
    password.send_keys(account_email_password)  # Replace with your password
    driver.find_element(By.ID, "passwordNext").click()
    print("Password submitted. Waiting for login...")
    human_delay()

    # Step 4: Verify login by checking YouTube
    # baby shark daadodododaodoaodoadoaod :
    driver.get("https://www.youtube.com/watch?v=XqZsoesa55w")
    if "YouTube" in driver.title:
        print("✅ Login successful!")
        
        # Save cookies to a JSON file
        cookies = driver.get_cookies()
        netscape_format = json_to_netscape(cookies)

        with open("cookies_netscape", "w", encoding="utf-8") as cn:
            cn.write(netscape_format)
            
        print("cookies converted and saved to cookies_netscape")
    else:
        print("❌ Login failed. Check credentials or CAPTCHA.")

except Exception as e:
    print(f"❌ Error: {e}")

finally:
    # Close the browser
    driver.quit()
    print("Browser closed.")